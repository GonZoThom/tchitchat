##### React toastify
https://github.com/fkhadra/react-toastify

##### Simple-Schema
https://atmospherejs.com/aldeed/simple-schema#basic-usage

##### ManageRoomsForm.jsx

    const createRoom = useCallback(() => {
        console.log(name + ' 01')
        const checkDuplicate = () => {
            console.log(name + ' 02')
            Meteor.call("rooms.checkDuplicate", {name}, (err) =>{
                if (err)
                console.log(err);
            });
        };
        
        (checkDuplicate === true) ?
            console.log(name + ' true')
            // alert('Ce nom de salon est déjà pris. Merci d\'en chosir un autre !')
        :
            console.log(name + ' false')
            // Meteor.call("rooms.create", { name }, (err) => {
            //     if (err)
            //         console.log(err);
            // })
            ;

    }, [name]);


##### (Rooms) Methods.js

  "rooms.checkDuplicate"({ value }) {
    if (Rooms.findOne({name: value })) {
      return true;
    }
  },


############# Display the room Name in the Chatbox
##### Chatbox.jsx

    // import Rooms from '/imports/api/rooms';
    // const roomName = () => Rooms.findOne({ _id: roomId }, { fields: { name: 1 } });
    // console.log("room name = ");
    // console.log(roomName.name);    


############# Different ways to sort the rooms by owner's id ;
-> Faire 2 méthodes de publications ; l'une pour les rooms de l'utilisateur,
et l'autre pour tous les autres utilisateurs.

-> Dans une props 'owner', on teste si c'est true or false. Ensuite, dans le component 'Room',
on affiche d'abord les 'true', on et un titre et on continue l'affichage des autres.


############# Future advice on email verification

You’ll need to both verify the user’s token and call the done callback within onEmailVerificationLink 18:

Accounts.onEmailVerificationLink(function (token, done) {
  Accounts.verifyEmail(token, function (error) {
    if (error) {
      // handle the error, perhaps by showing the user a message about an invalid token
    }
    done();
  });
});

The verifyEmail function will take care of updating the users collection for you.
Keep in mind that when you modify the user object like this:

user.emails[0].verified = true;

you are updating the copy of the user that you fetched from the users collection. 
Changes you make to this copy won’t affect the collection. 
You need to use Meteor.users.update() to modify the user 
in a way that the server will see.